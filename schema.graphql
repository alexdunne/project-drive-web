schema {
  query: RootQueryType
  mutation: RootMutationType
}

type AuthPayload {
  token: String!
  user: User
}

input CreateLessonInput {
  endsAt: DateTime!
  notes: String
  startsAt: DateTime!
  studentId: ID!
}

type CreateLessonPayload {
  lesson: Event
}

input CreateStudentInviteInput {
  email: String!
  name: String!
}

"""
The `DateTime` scalar type represents a date and time in the UTC
timezone. The DateTime appears in a JSON response as an ISO8601 formatted
string, including UTC timezone ("Z"). The parsed date and time string will
be converted to UTC if there is an offset.
"""
scalar DateTime

input DeleteLessonInput {
  id: ID!
}

type DeleteLessonPayload {
  id: ID!
}

type Event implements Node {
  endsAt: DateTime!

  """The ID of an object"""
  id: ID!
  notes: String
  startsAt: DateTime!
  student: Student!
  type: EventType!
}

type EventConnection {
  edges: [EventEdge]
  pageInfo: PageInfo!
}

type EventEdge {
  cursor: String
  node: Event
}

enum EventType {
  """Lesson event type"""
  LESSON
}

input LoginInput {
  email: String!
  password: String!
}

interface Node {
  """The id of the object."""
  id: ID!
}

type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

input RegisterInput {
  email: String!
  name: String!
  password: String!
}

input RegisterStudentInviteInput {
  name: String!
  password: String!
  token: String!
}

input RescheduleLessonInput {
  endsAt: DateTime!
  id: ID!
  startsAt: DateTime!
}

type RescheduleLessonPayload {
  lesson: Event
}

type RootMutationType {
  createLesson(input: CreateLessonInput!): CreateLessonPayload

  """Invite a person to become a Student of the current Instructor"""
  createStudentInvite(input: CreateStudentInviteInput!): StudentInvitePayload
  deleteLesson(input: DeleteLessonInput!): DeleteLessonPayload

  """Login with existing account credentials"""
  login(input: LoginInput!): AuthPayload

  """Register a new user account"""
  register(input: RegisterInput!): AuthPayload

  """Register a new user account from a student invite"""
  registerFromStudentInvite(input: RegisterStudentInviteInput!): AuthPayload
  rescheduleLesson(input: RescheduleLessonInput!): RescheduleLessonPayload
  updateLesson(input: UpdateLessonInput!): UpdateLessonPayload
}

type RootQueryType {
  events(after: String, before: String, first: Int, last: Int): EventConnection
  node(
    """The id of an object."""
    id: ID!
  ): Node
}

type Student implements Node {
  email: String!

  """The ID of an object"""
  id: ID!
  name: String!
}

type StudentInvite implements Node {
  email: String!

  """The ID of an object"""
  id: ID!
  name: String!
}

type StudentInvitePayload {
  student: Student
  studentInvite: StudentInvite
}

input UpdateLessonInput {
  endsAt: DateTime
  id: ID!
  notes: String
  startsAt: DateTime
}

type UpdateLessonPayload {
  lesson: Event
}

type User {
  id: ID!
}

