schema {
  query: RootQueryType
  mutation: RootMutationType
}

input CreateLessonInput {
  endsAt: DateTime!
  notes: String
  startsAt: DateTime!
  studentId: ID!
}

type CreateLessonPayload {
  lesson: Event
}

input CreateStudentInviteInput {
  email: String!
  name: String!
}

type CreateStudentInvitePayload {
  student: Student
  studentInvite: StudentInvite
}

"""
The `DateTime` scalar type represents a date and time in the UTC
timezone. The DateTime appears in a JSON response as an ISO8601 formatted
string, including UTC timezone ("Z"). The parsed date and time string will
be converted to UTC if there is an offset.
"""
scalar DateTime

input DeleteLessonInput {
  lessonId: ID!
}

type DeleteLessonPayload {
  id: ID!
}

type Event implements Node {
  endsAt: DateTime!

  """The ID of an object"""
  id: ID!
  notes: String
  startsAt: DateTime!
  student: Student!
  type: EventType!
}

input EventConflictsCheckInput {
  endsAt: DateTime!
  startsAt: DateTime!
  type: EventType!
}

type EventConflictsCheckPayload {
  hasConflicts: Boolean
}

type EventConnection {
  edges: [EventEdge]
  pageInfo: PageInfo!
}

type EventEdge {
  cursor: String
  node: Event
}

enum EventType {
  """Lesson event type"""
  LESSON
}

interface Node {
  """The id of the object."""
  id: ID!
}

type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

input RescheduleLessonInput {
  endsAt: DateTime!
  lessonId: ID!
  startsAt: DateTime!
}

type RescheduleLessonPayload {
  lesson: Event
}

type RootMutationType {
  createLesson(input: CreateLessonInput!): CreateLessonPayload

  """Invite a person to become a Student of the current Instructor"""
  createStudentInvite(input: CreateStudentInviteInput!): CreateStudentInvitePayload
  deleteLesson(input: DeleteLessonInput!): DeleteLessonPayload
  rescheduleLesson(input: RescheduleLessonInput!): RescheduleLessonPayload
  updateLesson(input: UpdateLessonInput!): UpdateLessonPayload
}

type RootQueryType {
  eventConflictsCheck(input: EventConflictsCheckInput!): EventConflictsCheckPayload
  events(after: String, before: String, first: Int, last: Int, searchTerm: String): EventConnection
  node(
    """The id of an object."""
    id: ID!
  ): Node
  students(after: String, before: String, first: Int, last: Int, searchTerm: String): StudentConnection
}

type Student implements Node {
  email: String!

  """The ID of an object"""
  id: ID!
  name: String!
}

type StudentConnection {
  edges: [StudentEdge]
  pageInfo: PageInfo!
}

type StudentEdge {
  cursor: String
  node: Student
}

type StudentInvite implements Node {
  email: String!

  """The ID of an object"""
  id: ID!
  name: String!
}

input UpdateLessonInput {
  endsAt: DateTime
  lessonId: ID!
  notes: String
  startsAt: DateTime
}

type UpdateLessonPayload {
  lesson: Event
}

