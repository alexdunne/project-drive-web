schema {
  query: RootQueryType
  mutation: RootMutationType
}

type AuthPayload {
  token: String
  user: User
}

input CreateLessonInput {
  endsAt: DateTime!
  notes: String
  startsAt: DateTime!
  studentId: ID!
}

type CreateLessonPayload {
  lesson: Event
}

input CreateStudentInviteInput {
  email: String!
  name: String!
}

"""
The `DateTime` scalar type represents a date and time in the UTC
timezone. The DateTime appears in a JSON response as an ISO8601 formatted
string, including UTC timezone ("Z"). The parsed date and time string will
be converted to UTC if there is an offset.
"""
scalar DateTime

input DeleteLessonInput {
  id: ID!
}

type DeleteLessonPayload {
  id: ID!
}

type Event implements Node {
  endsAt: DateTime!

  """The ID of an object"""
  id: ID!
  notes: String
  startsAt: DateTime!
  student: Student!
  type: EventType!
}

enum EventType {
  """Lesson event type"""
  LESSON
}

input LoginInput {
  email: String!
  password: String!
}

interface Node {
  """The id of the object."""
  id: ID!
}

input RegisterInput {
  email: String!
  name: String!
  password: String!
}

input RegisterStudentInviteInput {
  name: String!
  password: String!
  token: String!
}

input RescheduleLessonInput {
  endsAt: DateTime!
  id: ID!
  startsAt: DateTime!
}

type RescheduleLessonPayload {
  lesson: Event
}

type RootMutationType {
  createLesson(input: CreateLessonInput!): CreateLessonPayload

  """Invite a person to become a Student of the current Instructor"""
  createStudentInvite(input: CreateStudentInviteInput!): StudentInvitePayload
  deleteLesson(input: DeleteLessonInput!): DeleteLessonPayload

  """Login with existing account credentials"""
  login(input: LoginInput!): AuthPayload

  """Register a new user account"""
  register(input: RegisterInput!): AuthPayload

  """Register a new user account from a student invite"""
  registerFromStudentInvite(input: RegisterStudentInviteInput!): AuthPayload
  rescheduleLesson(input: RescheduleLessonInput!): RescheduleLessonPayload
  updateLesson(input: UpdateLessonInput!): UpdateLessonPayload
}

type RootQueryType {
  node(
    """The id of an object."""
    id: ID!
  ): Node
}

type Student {
  email: String!
  id: ID!
  name: String!
}

type StudentInvite {
  email: String!
  name: String!
}

type StudentInvitePayload {
  student: Student
  studentInvite: StudentInvite
}

input UpdateLessonInput {
  endsAt: DateTime
  id: ID!
  notes: String
  startsAt: DateTime
}

type UpdateLessonPayload {
  lesson: Event
}

type User {
  id: ID
}

